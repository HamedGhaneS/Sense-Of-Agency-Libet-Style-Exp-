%% 1st Phase of the experiment (SoA) : Data gathering for classifier training

%%%  1. Stereo sounds are generated by PsychToolbox: 50 ms 
%%%     ('SoundGeneration_3_stereo')
%%%  2. Fixation cross colors are red (playing sound + refractory time) and 
%%%     green (keypress allowed)
%%%  3. By first keypress, the instruction page changes to a black empty
%%%     page and remains for 3 seconds. Then, green fixation cross appears.
%%%  4. Three different triggers will be sent:
%%%    4.1 We use '1' to denote a valid key press (during green fixation cross)
%%%    4.2 We use '2' to denote an invalid key press (during red fixation cross)
%%%    4.3 We use '3' to denote appearance of green fixation cross and trial start (the first trigger) 
%%%     (except the first trial which is saved as: first_keypress_time_after_start) 
% By: Hamed Ghane
% Date: 2023.05.25

clear all;
close all;


%% Initializing 

LTP_ADRESS = hex2dec('379');
LPT_BUTTON_PRESSED = 95;
AUDIO_DEVICE_ID = 3; % devices = PsychPortAudio('GetDevices' , [], [])

% for One-sound case:
%AUDIO_FILE_NAME = 'bell.wav';
mean_iti=1;

% for Multiple-sound case:
AUDIO_FILE_NAMES = {'sound1.wav', 'sound2.wav', 'sound3.wav', 'sound4.wav', 'sound5.wav'};


% Initialize counters
num_trials = 0;
num_valid_keypresses = 0;
num_invalid_keypresses = 0;

% Create a figure to display counters
counter_fig = figure('Name', 'Counter', 'NumberTitle', 'off', 'Color', 'w', 'Position', [100, 100, 400, 200]);
counter_ax = axes('Parent', counter_fig, 'Position', [0 0 1 1], 'Visible', 'off');
counter_text = text(0.5, 0.5, sprintf('Number of Trials: %d\nValid Keypresses: %d\nInvalid Keypresses: %d', ...
    num_trials, num_valid_keypresses, num_invalid_keypresses), ...
    'Parent', counter_ax, 'HorizontalAlignment', 'center', 'FontSize', 18, 'FontWeight', 'bold');
title(counter_ax, 'Experiment Counter', 'FontSize', 24, 'FontWeight', 'bold', 'Color', 'k');
axis off;

%% Initialize parallel port
ioObj = io64;
status = io64(ioObj);

import java.net.Socket      
import java.io.*
sock = Socket('localhost', 1234); 
output_stream = sock.getOutputStream;
d_output_stream = DataOutputStream(output_stream);

%% Initialize audio

% For One-sound case:

% InitializePsychSound(1);
% pahandle = PsychPortAudio('Open', AUDIO_DEVICE_ID, 1, 2);
% PsychPortAudio('LatencyBias', pahandle, 0);
% [y, f] = audioread(AUDIO_FILE_NAME);
% PsychPortAudio('FillBuffer', pahandle, y');

% For Multiple-sound case:
InitializePsychSound(1);

% Open the master audio device
pahandle = PsychPortAudio('Open', AUDIO_DEVICE_ID, 9, 2);

% Set the latency bias
Latency_BIAS = 0; % adjust this value as needed
PsychPortAudio('LatencyBias', pahandle, Latency_BIAS);

% Load each audio file into a separate slave device
pahandles = cell(1, length(AUDIO_FILE_NAMES));
for i = 1:length(AUDIO_FILE_NAMES)
    [y, f] = audioread(AUDIO_FILE_NAMES{i});
    slaveHandle = PsychPortAudio('OpenSlave', pahandle);
    PsychPortAudio('FillBuffer', slaveHandle, y');
    pahandles{i} = slaveHandle;
end
% Start the master device
PsychPortAudio('Start', pahandle, 0, 0, 1);
%% Monitor Controls
% Define monitor number for participant
screenNumberParticipant = 2;     % Monitor 2 for instructions and experiment

% Open the participant screen window
winParticipant = Screen('OpenWindow', screenNumberParticipant, 0);

instructionText = [
    '*** Welcome, Adventurer! *** \n\n\n' ...
    'You are about to embark on a journey of discovery and spontaneity.\n\n' ...
    'In this experiment, you have the power to press a magic button at will, without pre-planning or thinking ahead.\n\n' ...
    'Remember, your spontaneous button presses play a crucial role in this journey.\n' ...
    '\n\n *** How To Play *** \n\n' ...
    'When you feel the impulse, press the button. You will hear a sound from the loudspeaker confirming your action.\n\n' ...
    'But wait! We have a few guidelines for you.\n' ...
    '\n\n 1. The Guiding Cross: \n\n' ...
    'Keep your eyes focused on the cross at all times during the task. This will help us record your brain activity accurately.\n' ...
    '\n\n 2. Green or Red: \n\n' ...
    'You can press the button when the cross turns green. If the cross is red, take a pause but remember to keep looking at the cross. \n\n This is for us to record your baseline brain activity.\n' ...
    '\n\n 3. Unleash Your Spontaneity: \n\n' ...
    'Try to avoid pressing the button in a rhythmic or predictable pattern.\n\n We are keen on capturing your spontaneous presses, not the planned ones!\n' ...
    '\n\n\n Ready to begin this exciting journey? \n\n Press the button to start the experiment. May the spontaneity be with you!'];

% Change the font and font size
Screen('TextFont', winParticipant, 'Arial');
Screen('TextSize', winParticipant, 24);


DrawFormattedText(winParticipant, instructionText, 'center', 'center', 255);
Screen('Flip', winParticipant);



% Initialize the fixation cross
crossLength = 40; % Define the length of the cross arms
crossColorGreen = [0 255 0]; % Define the green color
crossColorRed = [255 0 0]; % Define the red color

% Define the center of the screen
[xCenter, yCenter] = RectCenter(Screen('Rect', winParticipant));



% Wait for the participant to press the key to start the experiment
while true
    data_in = io64(ioObj, LTP_ADRESS);
    if (LPT_BUTTON_PRESSED == data_in)
        experiment_start_time = GetSecs; % Record the time of experiment start
        break;
    end
end


% Handling the first keypress

% Immediately after keypress, change the screen to black
Screen('FillRect', winParticipant, BlackIndex(winParticipant)); % Fill the screen with black color
Screen('Flip', winParticipant); % Display the black screen

% Now pause for 3 seconds with the black screen
WaitSecs(3);

% Now display green cross
crossTextureGreen = Screen('OpenOffscreenWindow', winParticipant, 0, [0 0 2*crossLength 2*crossLength]);
Screen('DrawLine', crossTextureGreen, crossColorGreen, crossLength, 0, crossLength, 2*crossLength, 4);
Screen('DrawLine', crossTextureGreen, crossColorGreen, 0, crossLength, 2*crossLength, crossLength, 4);
Screen('DrawTexture', winParticipant, crossTextureGreen, [], CenterRectOnPoint([0 0 2*crossLength 2*crossLength], xCenter, yCenter), 0);
Screen('Flip', winParticipant);
Screen('Close', crossTextureGreen);

% Wait for the next keypress before starting the main loop
while true
    data_in = io64(ioObj, LTP_ADRESS);
    if (LPT_BUTTON_PRESSED == data_in)
        first_keypress_time_after_start = GetSecs; % Record the time of first keypress after start
        break;
    end
end


% Handling subsequent keypresses
while true
    data_in = io64(ioObj, LTP_ADRESS);
    t_iti = exprnd(mean_iti);
    
    if (LPT_BUTTON_PRESSED == data_in)
        % Red Fixation cross, sound, and green fixation cross sequence
         % Red Fixation Cross
        crossTextureRed = Screen('OpenOffscreenWindow', winParticipant, 0, [0 0 2*crossLength 2*crossLength]);
        Screen('DrawLine', crossTextureRed, crossColorRed, crossLength, 0, crossLength, 2*crossLength, 4);
        Screen('DrawLine', crossTextureRed, crossColorRed, 0, crossLength, 2*crossLength, crossLength, 4);
        Screen('DrawTexture', winParticipant, crossTextureRed, [], CenterRectOnPoint([0 0 2*crossLength 2*crossLength], xCenter, yCenter), 0);
        Screen('Flip', winParticipant);
        Screen('Close', crossTextureRed);


        % Sound and trigger
        i = randi(length(pahandles));
        PsychPortAudio('Start', pahandles{i}, 1, 0, 1);
        d_output_stream.writeBytes(char(['<trigger>',num2str(1),'</trigger>'])); % We use '1' to denote a valid key press (during green cross)
        d_output_stream.flush;

        % Counter update
        num_valid_keypresses = num_valid_keypresses + 1;
        % Update the counter display
        set(counter_text, 'String', sprintf('Number of Trials: %d\nValid Keypresses: %d\nInvalid Keypresses: %d', ...
        num_trials, num_valid_keypresses, num_invalid_keypresses));


        
        while PsychPortAudio('GetStatus', pahandles{i}).Active == 1
            % Nothing to do here, just waiting for audio to stop
        end


        % This loop and pause is just to assure the pressed key has been
        % released 
        data_in = io64(ioObj, LTP_ADRESS);
        while (LPT_BUTTON_PRESSED == data_in)
            data_in = io64(ioObj, LTP_ADRESS);
        end
        pause(0.01);

        % Enter a while loop for the duration of the pause
        pause_start_time = GetSecs();
        while GetSecs() - pause_start_time < (1 + t_iti)
            % Check for keypresses during this time
            data_in = io64(ioObj, LTP_ADRESS);
            if (LPT_BUTTON_PRESSED == data_in)
                d_output_stream.writeBytes(char(['<trigger>',num2str(2),'</trigger>'])); % We use '2' to denote an invalid (during red cross)
                d_output_stream.flush;

                % Counter update
                num_invalid_keypresses = num_invalid_keypresses + 1;
                set(counter_text, 'String', sprintf('Number of Trials: %d\nValid Keypresses: %d\nInvalid Keypresses: %d', ...
                num_trials, num_valid_keypresses, num_invalid_keypresses));

            end
        end

        % Green Cross
        crossTextureGreen = Screen('OpenOffscreenWindow', winParticipant, 0, [0 0 2*crossLength 2*crossLength]);
        Screen('DrawLine', crossTextureGreen, crossColorGreen, crossLength, 0, crossLength, 2*crossLength, 4);
        Screen('DrawLine', crossTextureGreen, crossColorGreen, 0, crossLength, 2*crossLength, crossLength, 4);
        Screen('DrawTexture', winParticipant, crossTextureGreen, [], CenterRectOnPoint([0 0 2*crossLength 2*crossLength], xCenter, yCenter), 0);
        Screen('Flip', winParticipant);
        Screen('Close', crossTextureGreen);


        % Add trigger here, after the green cross is displayed
        d_output_stream.writeBytes(char(['<trigger>',num2str(3),'</trigger>'])); % We use '3' to denote appearance of green cross
        d_output_stream.flush;

        % Counter update
        num_trials = num_trials + 1;
        set(counter_text, 'String', sprintf('Number of Trials: %d\nValid Keypresses: %d\nInvalid Keypresses: %d', ...
        num_trials, num_valid_keypresses, num_invalid_keypresses));


    end 

    % Break the loop if any key is pressed
    if CharAvail()
        GetChar();  
        break;
    end
end


% Stop and close all slave devices
for i = 1:length(pahandles)
    PsychPortAudio('Stop', pahandles{i});
    PsychPortAudio('Close', pahandles{i});
end

% Close the participant's screen
Screen('CloseAll');
ListenChar(0);
